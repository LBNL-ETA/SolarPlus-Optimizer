// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flexstat.proto

package xbospb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Flexstat struct {
	FlexstatState            *FlexstatState            `protobuf:"bytes,1,opt,name=flexstat_state,json=flexstatState,proto3" json:"flexstat_state,omitempty"`
	FlexstatActuationMessage *FlexstatActuationMessage `protobuf:"bytes,2,opt,name=flexstat_actuation_message,json=flexstatActuationMessage,proto3" json:"flexstat_actuation_message,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                  `json:"-"`
	XXX_unrecognized         []byte                    `json:"-"`
	XXX_sizecache            int32                     `json:"-"`
}

func (m *Flexstat) Reset()         { *m = Flexstat{} }
func (m *Flexstat) String() string { return proto.CompactTextString(m) }
func (*Flexstat) ProtoMessage()    {}
func (*Flexstat) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c3a15fc4e64d3b, []int{0}
}

func (m *Flexstat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flexstat.Unmarshal(m, b)
}
func (m *Flexstat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flexstat.Marshal(b, m, deterministic)
}
func (m *Flexstat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flexstat.Merge(m, src)
}
func (m *Flexstat) XXX_Size() int {
	return xxx_messageInfo_Flexstat.Size(m)
}
func (m *Flexstat) XXX_DiscardUnknown() {
	xxx_messageInfo_Flexstat.DiscardUnknown(m)
}

var xxx_messageInfo_Flexstat proto.InternalMessageInfo

func (m *Flexstat) GetFlexstatState() *FlexstatState {
	if m != nil {
		return m.FlexstatState
	}
	return nil
}

func (m *Flexstat) GetFlexstatActuationMessage() *FlexstatActuationMessage {
	if m != nil {
		return m.FlexstatActuationMessage
	}
	return nil
}

type FlexstatActuationMessage struct {
	Time                 uint64               `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Controls             *Int64               `protobuf:"bytes,2,opt,name=controls,proto3" json:"controls,omitempty"`
	Setpoints            []*FlexstatSetpoints `protobuf:"bytes,3,rep,name=setpoints,proto3" json:"setpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlexstatActuationMessage) Reset()         { *m = FlexstatActuationMessage{} }
func (m *FlexstatActuationMessage) String() string { return proto.CompactTextString(m) }
func (*FlexstatActuationMessage) ProtoMessage()    {}
func (*FlexstatActuationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c3a15fc4e64d3b, []int{1}
}

func (m *FlexstatActuationMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexstatActuationMessage.Unmarshal(m, b)
}
func (m *FlexstatActuationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexstatActuationMessage.Marshal(b, m, deterministic)
}
func (m *FlexstatActuationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexstatActuationMessage.Merge(m, src)
}
func (m *FlexstatActuationMessage) XXX_Size() int {
	return xxx_messageInfo_FlexstatActuationMessage.Size(m)
}
func (m *FlexstatActuationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexstatActuationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FlexstatActuationMessage proto.InternalMessageInfo

func (m *FlexstatActuationMessage) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FlexstatActuationMessage) GetControls() *Int64 {
	if m != nil {
		return m.Controls
	}
	return nil
}

func (m *FlexstatActuationMessage) GetSetpoints() []*FlexstatSetpoints {
	if m != nil {
		return m.Setpoints
	}
	return nil
}

type FlexstatSetpoints struct {
	ChangeTime           uint64   `protobuf:"varint,1,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	HeatingSetpoint      *Double  `protobuf:"bytes,2,opt,name=heating_setpoint,json=heatingSetpoint,proto3" json:"heating_setpoint,omitempty"`
	CoolingSetpoint      *Double  `protobuf:"bytes,3,opt,name=cooling_setpoint,json=coolingSetpoint,proto3" json:"cooling_setpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlexstatSetpoints) Reset()         { *m = FlexstatSetpoints{} }
func (m *FlexstatSetpoints) String() string { return proto.CompactTextString(m) }
func (*FlexstatSetpoints) ProtoMessage()    {}
func (*FlexstatSetpoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c3a15fc4e64d3b, []int{2}
}

func (m *FlexstatSetpoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexstatSetpoints.Unmarshal(m, b)
}
func (m *FlexstatSetpoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexstatSetpoints.Marshal(b, m, deterministic)
}
func (m *FlexstatSetpoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexstatSetpoints.Merge(m, src)
}
func (m *FlexstatSetpoints) XXX_Size() int {
	return xxx_messageInfo_FlexstatSetpoints.Size(m)
}
func (m *FlexstatSetpoints) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexstatSetpoints.DiscardUnknown(m)
}

var xxx_messageInfo_FlexstatSetpoints proto.InternalMessageInfo

func (m *FlexstatSetpoints) GetChangeTime() uint64 {
	if m != nil {
		return m.ChangeTime
	}
	return 0
}

func (m *FlexstatSetpoints) GetHeatingSetpoint() *Double {
	if m != nil {
		return m.HeatingSetpoint
	}
	return nil
}

func (m *FlexstatSetpoints) GetCoolingSetpoint() *Double {
	if m != nil {
		return m.CoolingSetpoint
	}
	return nil
}

type FlexstatState struct {
	//epoch time
	//unit: seconds
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	//Integral space temperature sensor
	//unit: F
	SpaceTempSensor *Double `protobuf:"bytes,2,opt,name=space_temp_sensor,json=spaceTempSensor,proto3" json:"space_temp_sensor,omitempty"`
	//Minimum allowed cooling or heating proportional value
	//unit: F
	MinimumProportional *Double `protobuf:"bytes,3,opt,name=minimum_proportional,json=minimumProportional,proto3" json:"minimum_proportional,omitempty"`
	//Currently active cooling setpoint
	//unit: F
	ActiveCoolingSetpt *Double `protobuf:"bytes,4,opt,name=active_cooling_setpt,json=activeCoolingSetpt,proto3" json:"active_cooling_setpt,omitempty"`
	//Currently active heating setpoint
	//unit: F
	ActiveHeatingSetpt *Double `protobuf:"bytes,5,opt,name=active_heating_setpt,json=activeHeatingSetpt,proto3" json:"active_heating_setpt,omitempty"`
	//Unoccupied Cooling Setpoint
	//unit: F
	UnoccCoolingSetpt *Double `protobuf:"bytes,6,opt,name=unocc_cooling_setpt,json=unoccCoolingSetpt,proto3" json:"unocc_cooling_setpt,omitempty"`
	//Unoccupied Heating Setpoint
	//unit: F
	UnoccHeatingSetpt *Double `protobuf:"bytes,7,opt,name=unocc_heating_setpt,json=unoccHeatingSetpt,proto3" json:"unocc_heating_setpt,omitempty"`
	//Occupied Minimum Cooling Setpoint
	//unit: F
	OccMinClgSetpt *Double `protobuf:"bytes,8,opt,name=occ_min_clg_setpt,json=occMinClgSetpt,proto3" json:"occ_min_clg_setpt,omitempty"`
	//Occupied Maximum Heating Setpoint
	//unit: F
	OccMaxHtgSetpt *Double `protobuf:"bytes,9,opt,name=occ_max_htg_setpt,json=occMaxHtgSetpt,proto3" json:"occ_max_htg_setpt,omitempty"`
	//Time of delay between stage
	//unit: minutes
	StageDelay *Double `protobuf:"bytes,10,opt,name=stage_delay,json=stageDelay,proto3" json:"stage_delay,omitempty"`
	//Time fan will run after reaching setpoint
	//unit: seconds
	FanShutoffDelay *Double `protobuf:"bytes,11,opt,name=fan_shutoff_delay,json=fanShutoffDelay,proto3" json:"fan_shutoff_delay,omitempty"`
	//Occupancy Override Time
	//unit: hours
	OverrideTimer *Double `protobuf:"bytes,12,opt,name=override_timer,json=overrideTimer,proto3" json:"override_timer,omitempty"`
	//Occupied Cooling Setpoint
	//unit: F
	OccCoolingSetpt *Double `protobuf:"bytes,13,opt,name=occ_cooling_setpt,json=occCoolingSetpt,proto3" json:"occ_cooling_setpt,omitempty"`
	//Occupied Heating Setpoint
	//unit: F
	OccHeatingSetpt *Double `protobuf:"bytes,14,opt,name=occ_heating_setpt,json=occHeatingSetpt,proto3" json:"occ_heating_setpt,omitempty"`
	//Setpoint that the FlexStat is currently controlling to.
	//unit: F
	CurrentModeSetpt *Double `protobuf:"bytes,15,opt,name=current_mode_setpt,json=currentModeSetpt,proto3" json:"current_mode_setpt,omitempty"`
	//Setpoint that the UI displays and changes.
	//unit: F
	UiSetpt *Double `protobuf:"bytes,16,opt,name=ui_setpt,json=uiSetpt,proto3" json:"ui_setpt,omitempty"`
	//Cooling demand need
	//unit: percent
	CoolingNeed *Double `protobuf:"bytes,17,opt,name=cooling_need,json=coolingNeed,proto3" json:"cooling_need,omitempty"`
	//Heating demand need
	//unit: percent
	HeatingNeed *Double `protobuf:"bytes,18,opt,name=heating_need,json=heatingNeed,proto3" json:"heating_need,omitempty"`
	//Unoccupied Minimum Cooling Setpoint
	//unit: F
	UnoccMinClgSetpt *Double `protobuf:"bytes,19,opt,name=unocc_min_clg_setpt,json=unoccMinClgSetpt,proto3" json:"unocc_min_clg_setpt,omitempty"`
	//Unoccupied Maximum Heating Setpoint
	//unit: F
	UnoccMaxHtgSetpt *Double `protobuf:"bytes,20,opt,name=unocc_max_htg_setpt,json=unoccMaxHtgSetpt,proto3" json:"unocc_max_htg_setpt,omitempty"`
	//Minimum Setpoint differential
	//unit: F
	MinSetptDiff *Double `protobuf:"bytes,21,opt,name=min_setpt_diff,json=minSetptDiff,proto3" json:"min_setpt_diff,omitempty"`
	//Minimum Setpoint differential limit
	//unit: F
	MinSetptLimit *Double `protobuf:"bytes,22,opt,name=min_setpt_limit,json=minSetptLimit,proto3" json:"min_setpt_limit,omitempty"`
	//Space Temperature
	//unit: F
	SpaceTemp *Double `protobuf:"bytes,23,opt,name=space_temp,json=spaceTemp,proto3" json:"space_temp,omitempty"`
	//Cooling Loop proportional
	//unit: F
	CoolingProp *Double `protobuf:"bytes,24,opt,name=cooling_prop,json=coolingProp,proto3" json:"cooling_prop,omitempty"`
	//Heating Loop proportional
	//unit: F
	HeatingProp *Double `protobuf:"bytes,25,opt,name=heating_prop,json=heatingProp,proto3" json:"heating_prop,omitempty"`
	//Cooling Loop integral
	//unit: per hour
	CoolingIntg *Double `protobuf:"bytes,26,opt,name=cooling_intg,json=coolingIntg,proto3" json:"cooling_intg,omitempty"`
	//Heating Loop integral
	//unit: per hour
	HeatingIntg *Double `protobuf:"bytes,27,opt,name=heating_intg,json=heatingIntg,proto3" json:"heating_intg,omitempty"`
	//Main Function Of Controller (0: NOT CONFIGURED; 1: AIR HANDLER; 2: ROOF TOP; 3: FAN COIL; 4: HEAT PUMP)
	AppMainType *Int64 `protobuf:"bytes,28,opt,name=app_main_type,json=appMainType,proto3" json:"app_main_type,omitempty"`
	//Sub Function of Application (0: 1H / 1C; 1: 1H / 2C; 2: 2H / 1C; 3: 2H / 2C)
	AppSubType *Int64 `protobuf:"bytes,29,opt,name=app_sub_type,json=appSubType,proto3" json:"app_sub_type,omitempty"`
	//Type Of Fan Operation (0: CONSTANT SPEED)
	FanControlType *Int64 `protobuf:"bytes,30,opt,name=fan_control_type,json=fanControlType,proto3" json:"fan_control_type,omitempty"`
	//Outside Air Damper Option (0: NONE; 1: MODULATING; 2: EN/DIS)
	OaDamperOption *Int64 `protobuf:"bytes,31,opt,name=oa_damper_option,json=oaDamperOption,proto3" json:"oa_damper_option,omitempty"`
	//Mode of FlexStat Operation (0: AUTO; 1: HEATING; 2: COOLING; 3: OFF)
	SystemMode *Int64 `protobuf:"bytes,32,opt,name=system_mode,json=systemMode,proto3" json:"system_mode,omitempty"`
	//Controls whether the fan speed is fixed or automatic control (0: NOT USED)
	FanSpeedOutput *Int64 `protobuf:"bytes,33,opt,name=fan_speed_output,json=fanSpeedOutput,proto3" json:"fan_speed_output,omitempty"`
	//Selects User Interface behavior (0: STANDARD; 1: HOSPITALITY; 2: LOCKED UI)
	UiMode *Int64 `protobuf:"bytes,34,opt,name=ui_mode,json=uiMode,proto3" json:"ui_mode,omitempty"`
	//Input reference for space temperature (0: ONBOARD; 1: REMOTE; 2: AVERAGE; 3: HIGHEST; 4: LOWEST)
	TemperatureReference *Int64 `protobuf:"bytes,35,opt,name=temperature_reference,json=temperatureReference,proto3" json:"temperature_reference,omitempty"`
	//Fan Control
	//unit: T/F
	Fan *Int64 `protobuf:"bytes,36,opt,name=fan,proto3" json:"fan,omitempty"`
	//Cool #1
	//unit: T/F
	Cool_1 *Int64 `protobuf:"bytes,37,opt,name=cool_1,json=cool1,proto3" json:"cool_1,omitempty"`
	//Cool #2
	//unit: T/F
	Cool_2 *Int64 `protobuf:"bytes,38,opt,name=cool_2,json=cool2,proto3" json:"cool_2,omitempty"`
	//Heat #1
	//unit: T/F
	Heat_1 *Int64 `protobuf:"bytes,39,opt,name=heat_1,json=heat1,proto3" json:"heat_1,omitempty"`
	//Relay #5
	//unit: T/F
	Bo_05 *Int64 `protobuf:"bytes,40,opt,name=bo_05,json=bo05,proto3" json:"bo_05,omitempty"`
	//Relay #6
	//unit: T/F
	Bo_06 *Int64 `protobuf:"bytes,41,opt,name=bo_06,json=bo06,proto3" json:"bo_06,omitempty"`
	//Occupancy mode
	//unit: T/F
	OccupancyMode *Int64 `protobuf:"bytes,42,opt,name=occupancy_mode,json=occupancyMode,proto3" json:"occupancy_mode,omitempty"`
	//set point override mode
	//unit: T/F
	SetptOverrideMode *Int64 `protobuf:"bytes,43,opt,name=setpt_override_mode,json=setptOverrideMode,proto3" json:"setpt_override_mode,omitempty"`
	//Economizer Mode
	//unit: T/F
	EconomizerMode *Int64 `protobuf:"bytes,44,opt,name=economizer_mode,json=economizerMode,proto3" json:"economizer_mode,omitempty"`
	//Low Limit Alarm Condition
	//unit: T/F
	LowLimitCondition *Int64 `protobuf:"bytes,45,opt,name=low_limit_condition,json=lowLimitCondition,proto3" json:"low_limit_condition,omitempty"`
	//Fan Alarm Condition
	//unit: T/F
	FanAlarm *Int64 `protobuf:"bytes,46,opt,name=fan_alarm,json=fanAlarm,proto3" json:"fan_alarm,omitempty"`
	//need for fan
	//unit: T/F
	FanNeed *Int64 `protobuf:"bytes,47,opt,name=fan_need,json=fanNeed,proto3" json:"fan_need,omitempty"`
	//Heating/Cooling Mode
	//unit: T/F
	HeatingCoolingMode *Int64 `protobuf:"bytes,48,opt,name=heating_cooling_mode,json=heatingCoolingMode,proto3" json:"heating_cooling_mode,omitempty"`
	//Determines whether fan is continuous or cycles in occ mode
	//unit: T/F
	OccFanAutoOn *Int64 `protobuf:"bytes,49,opt,name=occ_fan_auto_on,json=occFanAutoOn,proto3" json:"occ_fan_auto_on,omitempty"`
	//Determines whether fan is continuous or cycles in unocc mode
	//unit: T/F
	UnoccFanAutoOn *Int64 `protobuf:"bytes,50,opt,name=unocc_fan_auto_on,json=unoccFanAutoOn,proto3" json:"unocc_fan_auto_on,omitempty"`
	//Selects Fahrenheit or Celsius temperature scale
	//unit: T/F
	FCFlag *Int64 `protobuf:"bytes,51,opt,name=f_c_flag,json=fCFlag,proto3" json:"f_c_flag,omitempty"`
	//Fan Status
	//unit: T/F
	FanStatus *Int64 `protobuf:"bytes,52,opt,name=fan_status,json=fanStatus,proto3" json:"fan_status,omitempty"`
	//UI System mode active
	//unit: T/F
	UiSystemModeActive *Int64 `protobuf:"bytes,53,opt,name=ui_system_mode_active,json=uiSystemModeActive,proto3" json:"ui_system_mode_active,omitempty"`
	//Optimum Start enable
	//unit: T/F
	OptStartEnable *Int64 `protobuf:"bytes,54,opt,name=opt_start_enable,json=optStartEnable,proto3" json:"opt_start_enable,omitempty"`
	//Setback OAT Lockout contol
	//unit: T/F
	SetbackOatLockout *Int64 `protobuf:"bytes,55,opt,name=setback_oat_lockout,json=setbackOatLockout,proto3" json:"setback_oat_lockout,omitempty"`
	//Heating call for fan
	//unit: T/F
	HtgCallFan           *Int64   `protobuf:"bytes,56,opt,name=htg_call_fan,json=htgCallFan,proto3" json:"htg_call_fan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlexstatState) Reset()         { *m = FlexstatState{} }
func (m *FlexstatState) String() string { return proto.CompactTextString(m) }
func (*FlexstatState) ProtoMessage()    {}
func (*FlexstatState) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c3a15fc4e64d3b, []int{3}
}

func (m *FlexstatState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexstatState.Unmarshal(m, b)
}
func (m *FlexstatState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexstatState.Marshal(b, m, deterministic)
}
func (m *FlexstatState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexstatState.Merge(m, src)
}
func (m *FlexstatState) XXX_Size() int {
	return xxx_messageInfo_FlexstatState.Size(m)
}
func (m *FlexstatState) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexstatState.DiscardUnknown(m)
}

var xxx_messageInfo_FlexstatState proto.InternalMessageInfo

func (m *FlexstatState) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FlexstatState) GetSpaceTempSensor() *Double {
	if m != nil {
		return m.SpaceTempSensor
	}
	return nil
}

func (m *FlexstatState) GetMinimumProportional() *Double {
	if m != nil {
		return m.MinimumProportional
	}
	return nil
}

func (m *FlexstatState) GetActiveCoolingSetpt() *Double {
	if m != nil {
		return m.ActiveCoolingSetpt
	}
	return nil
}

func (m *FlexstatState) GetActiveHeatingSetpt() *Double {
	if m != nil {
		return m.ActiveHeatingSetpt
	}
	return nil
}

func (m *FlexstatState) GetUnoccCoolingSetpt() *Double {
	if m != nil {
		return m.UnoccCoolingSetpt
	}
	return nil
}

func (m *FlexstatState) GetUnoccHeatingSetpt() *Double {
	if m != nil {
		return m.UnoccHeatingSetpt
	}
	return nil
}

func (m *FlexstatState) GetOccMinClgSetpt() *Double {
	if m != nil {
		return m.OccMinClgSetpt
	}
	return nil
}

func (m *FlexstatState) GetOccMaxHtgSetpt() *Double {
	if m != nil {
		return m.OccMaxHtgSetpt
	}
	return nil
}

func (m *FlexstatState) GetStageDelay() *Double {
	if m != nil {
		return m.StageDelay
	}
	return nil
}

func (m *FlexstatState) GetFanShutoffDelay() *Double {
	if m != nil {
		return m.FanShutoffDelay
	}
	return nil
}

func (m *FlexstatState) GetOverrideTimer() *Double {
	if m != nil {
		return m.OverrideTimer
	}
	return nil
}

func (m *FlexstatState) GetOccCoolingSetpt() *Double {
	if m != nil {
		return m.OccCoolingSetpt
	}
	return nil
}

func (m *FlexstatState) GetOccHeatingSetpt() *Double {
	if m != nil {
		return m.OccHeatingSetpt
	}
	return nil
}

func (m *FlexstatState) GetCurrentModeSetpt() *Double {
	if m != nil {
		return m.CurrentModeSetpt
	}
	return nil
}

func (m *FlexstatState) GetUiSetpt() *Double {
	if m != nil {
		return m.UiSetpt
	}
	return nil
}

func (m *FlexstatState) GetCoolingNeed() *Double {
	if m != nil {
		return m.CoolingNeed
	}
	return nil
}

func (m *FlexstatState) GetHeatingNeed() *Double {
	if m != nil {
		return m.HeatingNeed
	}
	return nil
}

func (m *FlexstatState) GetUnoccMinClgSetpt() *Double {
	if m != nil {
		return m.UnoccMinClgSetpt
	}
	return nil
}

func (m *FlexstatState) GetUnoccMaxHtgSetpt() *Double {
	if m != nil {
		return m.UnoccMaxHtgSetpt
	}
	return nil
}

func (m *FlexstatState) GetMinSetptDiff() *Double {
	if m != nil {
		return m.MinSetptDiff
	}
	return nil
}

func (m *FlexstatState) GetMinSetptLimit() *Double {
	if m != nil {
		return m.MinSetptLimit
	}
	return nil
}

func (m *FlexstatState) GetSpaceTemp() *Double {
	if m != nil {
		return m.SpaceTemp
	}
	return nil
}

func (m *FlexstatState) GetCoolingProp() *Double {
	if m != nil {
		return m.CoolingProp
	}
	return nil
}

func (m *FlexstatState) GetHeatingProp() *Double {
	if m != nil {
		return m.HeatingProp
	}
	return nil
}

func (m *FlexstatState) GetCoolingIntg() *Double {
	if m != nil {
		return m.CoolingIntg
	}
	return nil
}

func (m *FlexstatState) GetHeatingIntg() *Double {
	if m != nil {
		return m.HeatingIntg
	}
	return nil
}

func (m *FlexstatState) GetAppMainType() *Int64 {
	if m != nil {
		return m.AppMainType
	}
	return nil
}

func (m *FlexstatState) GetAppSubType() *Int64 {
	if m != nil {
		return m.AppSubType
	}
	return nil
}

func (m *FlexstatState) GetFanControlType() *Int64 {
	if m != nil {
		return m.FanControlType
	}
	return nil
}

func (m *FlexstatState) GetOaDamperOption() *Int64 {
	if m != nil {
		return m.OaDamperOption
	}
	return nil
}

func (m *FlexstatState) GetSystemMode() *Int64 {
	if m != nil {
		return m.SystemMode
	}
	return nil
}

func (m *FlexstatState) GetFanSpeedOutput() *Int64 {
	if m != nil {
		return m.FanSpeedOutput
	}
	return nil
}

func (m *FlexstatState) GetUiMode() *Int64 {
	if m != nil {
		return m.UiMode
	}
	return nil
}

func (m *FlexstatState) GetTemperatureReference() *Int64 {
	if m != nil {
		return m.TemperatureReference
	}
	return nil
}

func (m *FlexstatState) GetFan() *Int64 {
	if m != nil {
		return m.Fan
	}
	return nil
}

func (m *FlexstatState) GetCool_1() *Int64 {
	if m != nil {
		return m.Cool_1
	}
	return nil
}

func (m *FlexstatState) GetCool_2() *Int64 {
	if m != nil {
		return m.Cool_2
	}
	return nil
}

func (m *FlexstatState) GetHeat_1() *Int64 {
	if m != nil {
		return m.Heat_1
	}
	return nil
}

func (m *FlexstatState) GetBo_05() *Int64 {
	if m != nil {
		return m.Bo_05
	}
	return nil
}

func (m *FlexstatState) GetBo_06() *Int64 {
	if m != nil {
		return m.Bo_06
	}
	return nil
}

func (m *FlexstatState) GetOccupancyMode() *Int64 {
	if m != nil {
		return m.OccupancyMode
	}
	return nil
}

func (m *FlexstatState) GetSetptOverrideMode() *Int64 {
	if m != nil {
		return m.SetptOverrideMode
	}
	return nil
}

func (m *FlexstatState) GetEconomizerMode() *Int64 {
	if m != nil {
		return m.EconomizerMode
	}
	return nil
}

func (m *FlexstatState) GetLowLimitCondition() *Int64 {
	if m != nil {
		return m.LowLimitCondition
	}
	return nil
}

func (m *FlexstatState) GetFanAlarm() *Int64 {
	if m != nil {
		return m.FanAlarm
	}
	return nil
}

func (m *FlexstatState) GetFanNeed() *Int64 {
	if m != nil {
		return m.FanNeed
	}
	return nil
}

func (m *FlexstatState) GetHeatingCoolingMode() *Int64 {
	if m != nil {
		return m.HeatingCoolingMode
	}
	return nil
}

func (m *FlexstatState) GetOccFanAutoOn() *Int64 {
	if m != nil {
		return m.OccFanAutoOn
	}
	return nil
}

func (m *FlexstatState) GetUnoccFanAutoOn() *Int64 {
	if m != nil {
		return m.UnoccFanAutoOn
	}
	return nil
}

func (m *FlexstatState) GetFCFlag() *Int64 {
	if m != nil {
		return m.FCFlag
	}
	return nil
}

func (m *FlexstatState) GetFanStatus() *Int64 {
	if m != nil {
		return m.FanStatus
	}
	return nil
}

func (m *FlexstatState) GetUiSystemModeActive() *Int64 {
	if m != nil {
		return m.UiSystemModeActive
	}
	return nil
}

func (m *FlexstatState) GetOptStartEnable() *Int64 {
	if m != nil {
		return m.OptStartEnable
	}
	return nil
}

func (m *FlexstatState) GetSetbackOatLockout() *Int64 {
	if m != nil {
		return m.SetbackOatLockout
	}
	return nil
}

func (m *FlexstatState) GetHtgCallFan() *Int64 {
	if m != nil {
		return m.HtgCallFan
	}
	return nil
}

func init() {
	proto.RegisterType((*Flexstat)(nil), "xbospb.Flexstat")
	proto.RegisterType((*FlexstatActuationMessage)(nil), "xbospb.FlexstatActuationMessage")
	proto.RegisterType((*FlexstatSetpoints)(nil), "xbospb.FlexstatSetpoints")
	proto.RegisterType((*FlexstatState)(nil), "xbospb.FlexstatState")
}

func init() { proto.RegisterFile("flexstat.proto", fileDescriptor_67c3a15fc4e64d3b) }

var fileDescriptor_67c3a15fc4e64d3b = []byte{
	// 1218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x97, 0x6d, 0x53, 0x1b, 0x37,
	0x10, 0x80, 0x87, 0x42, 0x78, 0x59, 0x63, 0x83, 0x05, 0x34, 0x4a, 0xfa, 0x02, 0x75, 0xd3, 0x04,
	0xd2, 0x04, 0x30, 0x01, 0x93, 0x74, 0x92, 0x36, 0xd4, 0x94, 0x49, 0x66, 0x42, 0xe9, 0xd8, 0x7c,
	0xae, 0x46, 0x3e, 0xeb, 0x8c, 0x26, 0x77, 0xd2, 0xcd, 0x9d, 0x2e, 0x81, 0xfe, 0x8c, 0xfe, 0x8a,
	0xb6, 0xbf, 0xb2, 0x23, 0xe9, 0x64, 0x9f, 0x41, 0xf6, 0x97, 0x8c, 0x83, 0x9e, 0x47, 0xbb, 0x92,
	0x56, 0x2b, 0x1b, 0x6a, 0x61, 0xc4, 0xae, 0x33, 0x45, 0xd5, 0x6e, 0x92, 0x4a, 0x25, 0xd1, 0xfc,
	0x75, 0x4f, 0x66, 0x49, 0xef, 0xe1, 0x9a, 0xc8, 0xa3, 0x88, 0xf6, 0x22, 0xa6, 0x6e, 0x12, 0x96,
	0xd9, 0xc1, 0xc6, 0x3f, 0x33, 0xb0, 0x78, 0x56, 0xf0, 0xe8, 0xf5, 0xc8, 0x25, 0xfa, 0x1f, 0x86,
	0x67, 0xb6, 0x66, 0xb6, 0x2b, 0x07, 0x1b, 0xbb, 0x76, 0x8a, 0x5d, 0x47, 0x76, 0xf5, 0x60, 0xa7,
	0x1a, 0x96, 0xff, 0x8b, 0xfe, 0x84, 0x87, 0x43, 0x9b, 0x06, 0x2a, 0xa7, 0x8a, 0x4b, 0x41, 0x62,
	0x96, 0x65, 0x74, 0xc0, 0xf0, 0x17, 0x66, 0xa6, 0xad, 0xdb, 0x33, 0x9d, 0x38, 0xf0, 0xdc, 0x72,
	0x1d, 0x1c, 0x4e, 0x18, 0x69, 0xfc, 0x3d, 0x03, 0x78, 0x92, 0x86, 0x10, 0xcc, 0x29, 0x1e, 0xdb,
	0x84, 0xe7, 0x3a, 0xe6, 0x33, 0xda, 0x81, 0xc5, 0x40, 0x0a, 0x95, 0xca, 0x28, 0x2b, 0xc2, 0x57,
	0x5d, 0xf8, 0xf7, 0x42, 0xb5, 0x0e, 0x3b, 0xc3, 0x61, 0x74, 0x0c, 0x4b, 0x19, 0x53, 0x89, 0xe4,
	0x42, 0x65, 0x78, 0x76, 0x6b, 0x76, 0xbb, 0x72, 0xf0, 0xe0, 0xce, 0xa2, 0x1d, 0xd0, 0x19, 0xb1,
	0x8d, 0xff, 0x66, 0xa0, 0x7e, 0x07, 0x40, 0x9b, 0x50, 0x09, 0xae, 0xa8, 0x18, 0x30, 0x52, 0x4a,
	0x0a, 0xec, 0x9f, 0x2e, 0x75, 0x6a, 0xaf, 0x60, 0xf5, 0x8a, 0x51, 0xc5, 0xc5, 0x80, 0xb8, 0xb9,
	0x8a, 0x14, 0x6b, 0x2e, 0xec, 0xa9, 0xcc, 0x7b, 0x11, 0xeb, 0xac, 0x14, 0x9c, 0x9b, 0x5c, 0xab,
	0x81, 0x94, 0xd1, 0x98, 0x3a, 0xeb, 0x57, 0x0b, 0xce, 0xa9, 0x8d, 0x7f, 0xef, 0x43, 0x75, 0xec,
	0x08, 0xbd, 0xdb, 0xf6, 0x13, 0xd4, 0xb3, 0x84, 0x06, 0x8c, 0x28, 0x16, 0x27, 0x24, 0x63, 0x22,
	0x93, 0xe9, 0xa4, 0xe4, 0x0c, 0x78, 0xc9, 0xe2, 0xa4, 0x6b, 0x30, 0x74, 0x02, 0xeb, 0x31, 0x17,
	0x3c, 0xce, 0x63, 0x92, 0xa4, 0x32, 0x91, 0xa9, 0x3e, 0x23, 0x1a, 0x4d, 0x48, 0x70, 0xad, 0x60,
	0xff, 0x28, 0xa1, 0xe8, 0x2d, 0xac, 0xd3, 0x40, 0xf1, 0x4f, 0x8c, 0x94, 0x97, 0xa9, 0xf0, 0x9c,
	0x77, 0x0a, 0x64, 0xd9, 0xf6, 0x68, 0xa5, 0xaa, 0x34, 0x43, 0x79, 0x8f, 0x15, 0xbe, 0x37, 0x6d,
	0x86, 0x77, 0xa3, 0x6d, 0x56, 0xe8, 0x67, 0x58, 0xcb, 0x85, 0x0c, 0x82, 0x5b, 0x29, 0xcc, 0x7b,
	0x27, 0xa8, 0x1b, 0x74, 0x2c, 0x83, 0xa1, 0x3f, 0x9e, 0xc0, 0xc2, 0x14, 0x7f, 0x2c, 0xfe, 0x2b,
	0xa8, 0x6b, 0x3b, 0xe6, 0x82, 0x04, 0x91, 0xb3, 0x17, 0xbd, 0x76, 0x4d, 0x06, 0xc1, 0x39, 0x17,
	0xed, 0xe8, 0x96, 0x4a, 0xaf, 0xc9, 0x95, 0x72, 0xea, 0xd2, 0x64, 0x95, 0x5e, 0xbf, 0x53, 0x85,
	0xba, 0x07, 0x95, 0x4c, 0xd1, 0x01, 0x23, 0x7d, 0x16, 0xd1, 0x1b, 0x0c, 0x5e, 0x09, 0x0c, 0x72,
	0xaa, 0x09, 0x5d, 0x29, 0x21, 0x15, 0x24, 0xbb, 0xca, 0x95, 0x0c, 0xc3, 0x42, 0xab, 0xf8, 0x2b,
	0x25, 0xa4, 0xa2, 0x6b, 0x39, 0xeb, 0x1e, 0x41, 0x4d, 0x7e, 0x62, 0x69, 0xca, 0xfb, 0xf6, 0x92,
	0xa4, 0x78, 0xd9, 0x2b, 0x56, 0x1d, 0xa5, 0xef, 0x4d, 0xaa, 0x43, 0xde, 0x3d, 0x97, 0xaa, 0x3f,
	0xe4, 0xed, 0x53, 0x29, 0xdc, 0xf1, 0x33, 0xa9, 0x4d, 0x74, 0xc7, 0x4e, 0xe4, 0x35, 0xa0, 0x20,
	0x4f, 0x53, 0x26, 0x14, 0x89, 0x65, 0x9f, 0x15, 0xf2, 0x8a, 0x57, 0x5e, 0x2d, 0xc8, 0x73, 0xd9,
	0x67, 0xd6, 0xde, 0x81, 0xc5, 0x9c, 0x17, 0xce, 0xaa, 0xd7, 0x59, 0xc8, 0xb9, 0x45, 0x9b, 0xb0,
	0xec, 0x16, 0x27, 0x18, 0xeb, 0xe3, 0xba, 0x17, 0xaf, 0x14, 0xcc, 0xef, 0x8c, 0xf5, 0xb5, 0xe2,
	0xd6, 0x64, 0x14, 0xe4, 0x57, 0x0a, 0xc6, 0x28, 0x6f, 0x5c, 0x81, 0x8e, 0x97, 0xd8, 0x9a, 0x7f,
	0x3d, 0x06, 0x2d, 0x17, 0xd9, 0x48, 0x1f, 0x2b, 0xb3, 0xf5, 0x69, 0x7a, 0xa9, 0xd0, 0x0e, 0xa1,
	0xa6, 0xe3, 0x1a, 0x89, 0xf4, 0x79, 0x18, 0xe2, 0x0d, 0xaf, 0xb9, 0x1c, 0x73, 0x61, 0x8c, 0x53,
	0x1e, 0x86, 0xa8, 0x05, 0x2b, 0x23, 0x2b, 0xe2, 0x31, 0x57, 0xf8, 0x4b, 0x7f, 0xc9, 0x38, 0xed,
	0x83, 0x86, 0xd0, 0x73, 0x80, 0x51, 0x3f, 0xc3, 0xf7, 0xbd, 0xca, 0xd2, 0xb0, 0x91, 0x95, 0x0f,
	0x40, 0xb7, 0x30, 0x8c, 0xa7, 0x1e, 0x80, 0x6e, 0x5d, 0xe5, 0x03, 0x30, 0xca, 0x83, 0xa9, 0x07,
	0xe0, 0x14, 0x17, 0x85, 0x0b, 0x35, 0xc0, 0x0f, 0xa7, 0x46, 0x79, 0x2f, 0xd4, 0xa0, 0x1c, 0xc5,
	0x28, 0x5f, 0x4d, 0x8d, 0x52, 0x28, 0x55, 0x9a, 0x24, 0x24, 0xa6, 0x5c, 0x10, 0xfd, 0xea, 0xe3,
	0xaf, 0x7d, 0xcf, 0x60, 0x85, 0x26, 0xc9, 0x39, 0xe5, 0xe2, 0xf2, 0x26, 0x61, 0x68, 0x0f, 0x96,
	0xb5, 0x92, 0xe5, 0x3d, 0x6b, 0x7c, 0xe3, 0x33, 0x80, 0x26, 0x49, 0x37, 0xef, 0x19, 0xe1, 0x18,
	0x56, 0x75, 0x13, 0x28, 0x9e, 0x52, 0x2b, 0x7d, 0xeb, 0x93, 0x6a, 0x21, 0x15, 0x6d, 0x4b, 0x39,
	0x51, 0x52, 0xd2, 0xa7, 0x71, 0xc2, 0x52, 0x22, 0x13, 0xdd, 0xfe, 0xf1, 0xa6, 0x57, 0x94, 0xf4,
	0xd4, 0x50, 0x17, 0x06, 0x42, 0xbb, 0x50, 0xc9, 0x6e, 0x32, 0xc5, 0x62, 0x73, 0x15, 0xf1, 0x96,
	0x37, 0x43, 0x4b, 0xe8, 0x2b, 0xe8, 0x32, 0xcc, 0x12, 0xc6, 0xfa, 0x44, 0xe6, 0x2a, 0xc9, 0x15,
	0xfe, 0x6e, 0x52, 0x86, 0x5d, 0x4d, 0x5d, 0x18, 0x08, 0x3d, 0x86, 0x85, 0x9c, 0xdb, 0x20, 0x0d,
	0x1f, 0x3f, 0x9f, 0x73, 0x13, 0xe0, 0x57, 0xd8, 0xd0, 0xb5, 0xc5, 0x52, 0xaa, 0xf2, 0x94, 0x91,
	0x94, 0x85, 0x2c, 0x65, 0x22, 0x60, 0xf8, 0x7b, 0x9f, 0xb5, 0x5e, 0x62, 0x3b, 0x0e, 0x45, 0x9b,
	0x30, 0x1b, 0x52, 0x81, 0x1f, 0xf9, 0x0c, 0x3d, 0x82, 0x1e, 0xc1, 0xbc, 0xae, 0x06, 0xd2, 0xc4,
	0x3f, 0xf8, 0x98, 0x7b, 0x7a, 0xb0, 0x39, 0xa4, 0x0e, 0xf0, 0xe3, 0x89, 0xd4, 0x81, 0xa6, 0x74,
	0x99, 0x90, 0x26, 0x7e, 0xe2, 0xa5, 0xf4, 0x60, 0x13, 0x35, 0xe0, 0x5e, 0x4f, 0x92, 0xfd, 0x23,
	0xbc, 0xed, 0x83, 0xe6, 0x7a, 0x72, 0xff, 0xc8, 0x31, 0x2d, 0xbc, 0x33, 0x89, 0x69, 0xe9, 0xeb,
	0x2e, 0x83, 0x20, 0x4f, 0xa8, 0x08, 0x6e, 0xec, 0x6e, 0x3e, 0xf5, 0xc1, 0xd5, 0x21, 0x64, 0x36,
	0xf5, 0x0d, 0xac, 0xd9, 0xab, 0x3e, 0x7c, 0x26, 0x8c, 0xfa, 0xa3, 0x4f, 0xad, 0x1b, 0xf2, 0xa2,
	0x00, 0x8d, 0xde, 0x82, 0x15, 0x16, 0x48, 0x21, 0x63, 0xfe, 0x17, 0x4b, 0xad, 0xfa, 0xcc, 0x7b,
	0xe6, 0x23, 0xca, 0x85, 0x8d, 0xe4, 0x67, 0xdb, 0x5f, 0x74, 0x51, 0xf7, 0xb9, 0x29, 0xcc, 0xe7,
	0xde, 0xb0, 0x91, 0xfc, 0x6c, 0x7a, 0x4c, 0xdb, 0x71, 0xe8, 0x29, 0x2c, 0xe9, 0x5a, 0xa3, 0x11,
	0x4d, 0x63, 0xbc, 0xeb, 0xfd, 0xd2, 0x19, 0x52, 0x71, 0xa2, 0x87, 0xd1, 0x36, 0xe8, 0xcf, 0xb6,
	0x67, 0xef, 0xf9, 0xd0, 0x85, 0x90, 0x0a, 0xd3, 0xae, 0x7f, 0x81, 0x75, 0x77, 0xf5, 0x5d, 0xd7,
	0x30, 0x2b, 0xda, 0xf7, 0x59, 0xa8, 0x40, 0x8b, 0xb7, 0xcf, 0xac, 0xea, 0x10, 0xf4, 0x8b, 0x46,
	0x4c, 0x6a, 0xb9, 0x92, 0x44, 0x0a, 0xdc, 0xf4, 0xb9, 0xcb, 0x32, 0x08, 0xce, 0xa8, 0x38, 0xc9,
	0x95, 0xbc, 0x10, 0xe8, 0x25, 0xd8, 0xef, 0x26, 0x63, 0xde, 0x81, 0x77, 0x17, 0x0d, 0x37, 0x32,
	0x9f, 0xc0, 0x62, 0x48, 0x02, 0x12, 0x46, 0x74, 0x80, 0x5f, 0x78, 0xaf, 0x4e, 0xd8, 0x3e, 0x8b,
	0xe8, 0x00, 0x3d, 0x03, 0x30, 0x77, 0x53, 0x51, 0x95, 0x67, 0xf8, 0xd0, 0x87, 0xea, 0x0d, 0xed,
	0x9a, 0x71, 0xf4, 0x16, 0x36, 0xf4, 0x3b, 0x3a, 0xba, 0xfc, 0xc4, 0x7e, 0x79, 0xc3, 0x47, 0xde,
	0x8d, 0xc8, 0x79, 0x77, 0xd8, 0x05, 0x4e, 0x0c, 0x68, 0x9a, 0x4e, 0x62, 0x7e, 0xdd, 0xa4, 0x8a,
	0x30, 0xa1, 0x7f, 0x0e, 0xe1, 0x96, 0xbf, 0xe9, 0x24, 0xfa, 0x3b, 0x72, 0xaa, 0x7e, 0x33, 0x50,
	0x51, 0x8e, 0x3d, 0x1a, 0x7c, 0x24, 0x92, 0x2a, 0x12, 0xc9, 0xe0, 0xa3, 0xcc, 0x15, 0x3e, 0x9e,
	0x54, 0x8e, 0x9a, 0xbc, 0xa0, 0xea, 0x83, 0xe5, 0x74, 0x5b, 0xd5, 0xef, 0x64, 0x40, 0xa3, 0x48,
	0xef, 0x26, 0x7e, 0xe9, 0x6d, 0x5a, 0x57, 0x6a, 0xd0, 0xa6, 0x51, 0x74, 0x46, 0x45, 0x6f, 0xde,
	0xfc, 0x3e, 0x7b, 0xf1, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x0a, 0xf6, 0xb0, 0xce, 0x0d,
	0x00, 0x00,
}
