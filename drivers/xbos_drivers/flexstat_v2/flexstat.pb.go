// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flexstat.proto

package xbospb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FlexstateActuationMessage struct {
	Time                 uint64               `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Setpoints            []*FlexstatSetpoints `protobuf:"bytes,2,rep,name=setpoints,proto3" json:"setpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlexstateActuationMessage) Reset()         { *m = FlexstateActuationMessage{} }
func (m *FlexstateActuationMessage) String() string { return proto.CompactTextString(m) }
func (*FlexstateActuationMessage) ProtoMessage()    {}
func (*FlexstateActuationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c3a15fc4e64d3b, []int{0}
}

func (m *FlexstateActuationMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexstateActuationMessage.Unmarshal(m, b)
}
func (m *FlexstateActuationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexstateActuationMessage.Marshal(b, m, deterministic)
}
func (m *FlexstateActuationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexstateActuationMessage.Merge(m, src)
}
func (m *FlexstateActuationMessage) XXX_Size() int {
	return xxx_messageInfo_FlexstateActuationMessage.Size(m)
}
func (m *FlexstateActuationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexstateActuationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FlexstateActuationMessage proto.InternalMessageInfo

func (m *FlexstateActuationMessage) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FlexstateActuationMessage) GetSetpoints() []*FlexstatSetpoints {
	if m != nil {
		return m.Setpoints
	}
	return nil
}

type FlexstatSetpoints struct {
	ChangeTime           uint64   `protobuf:"varint,1,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	HeatingSetpoint      *Double  `protobuf:"bytes,2,opt,name=heating_setpoint,json=heatingSetpoint,proto3" json:"heating_setpoint,omitempty"`
	CoolingSetpoint      *Double  `protobuf:"bytes,3,opt,name=cooling_setpoint,json=coolingSetpoint,proto3" json:"cooling_setpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlexstatSetpoints) Reset()         { *m = FlexstatSetpoints{} }
func (m *FlexstatSetpoints) String() string { return proto.CompactTextString(m) }
func (*FlexstatSetpoints) ProtoMessage()    {}
func (*FlexstatSetpoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c3a15fc4e64d3b, []int{1}
}

func (m *FlexstatSetpoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexstatSetpoints.Unmarshal(m, b)
}
func (m *FlexstatSetpoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexstatSetpoints.Marshal(b, m, deterministic)
}
func (m *FlexstatSetpoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexstatSetpoints.Merge(m, src)
}
func (m *FlexstatSetpoints) XXX_Size() int {
	return xxx_messageInfo_FlexstatSetpoints.Size(m)
}
func (m *FlexstatSetpoints) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexstatSetpoints.DiscardUnknown(m)
}

var xxx_messageInfo_FlexstatSetpoints proto.InternalMessageInfo

func (m *FlexstatSetpoints) GetChangeTime() uint64 {
	if m != nil {
		return m.ChangeTime
	}
	return 0
}

func (m *FlexstatSetpoints) GetHeatingSetpoint() *Double {
	if m != nil {
		return m.HeatingSetpoint
	}
	return nil
}

func (m *FlexstatSetpoints) GetCoolingSetpoint() *Double {
	if m != nil {
		return m.CoolingSetpoint
	}
	return nil
}

type FlexstatState struct {
	//space temperature reading
	//unit: F
	SpaceTempSensor *Double `protobuf:"bytes,1,opt,name=space_temp_sensor,json=spaceTempSensor,proto3" json:"space_temp_sensor,omitempty"`
	//minimum P value for of the PI control
	//unit: F
	MinimumProportional *Double `protobuf:"bytes,2,opt,name=minimum_proportional,json=minimumProportional,proto3" json:"minimum_proportional,omitempty"`
	//active cooling setpoint
	//unit: F
	ActiveCoolingSetpt *Double `protobuf:"bytes,3,opt,name=active_cooling_setpt,json=activeCoolingSetpt,proto3" json:"active_cooling_setpt,omitempty"`
	//active heating setpoint
	//unit: F
	ActiveHeatingSetpt *Double `protobuf:"bytes,4,opt,name=active_heating_setpt,json=activeHeatingSetpt,proto3" json:"active_heating_setpt,omitempty"`
	//cooling setpoint during unoccupied times
	//unit: F
	UnoccCoolingSetpt *Double `protobuf:"bytes,5,opt,name=unocc_cooling_setpt,json=unoccCoolingSetpt,proto3" json:"unocc_cooling_setpt,omitempty"`
	//heating setpoint during unoccupied times
	//unit: F
	UnoccHeatingSetpt *Double `protobuf:"bytes,6,opt,name=unocc_heating_setpt,json=unoccHeatingSetpt,proto3" json:"unocc_heating_setpt,omitempty"`
	//minimum cooling setpoint during occupied times
	//unit: F
	OccMinClgSetpt *Double `protobuf:"bytes,7,opt,name=occ_min_clg_setpt,json=occMinClgSetpt,proto3" json:"occ_min_clg_setpt,omitempty"`
	//maximum heating setpoint during occupied times
	//unit: F
	OccMaxHtgSetpt *Double `protobuf:"bytes,8,opt,name=occ_max_htg_setpt,json=occMaxHtgSetpt,proto3" json:"occ_max_htg_setpt,omitempty"`
	//override timer
	//unit: hours
	OverrideTimer *Double `protobuf:"bytes,9,opt,name=override_timer,json=overrideTimer,proto3" json:"override_timer,omitempty"`
	//cooling setpoint during occupied times
	//unit: F
	OccCoolingSetpt *Double `protobuf:"bytes,10,opt,name=occ_cooling_setpt,json=occCoolingSetpt,proto3" json:"occ_cooling_setpt,omitempty"`
	//heating setpoint during occupied times
	//unit: F
	OccHeatingSetpt *Double `protobuf:"bytes,11,opt,name=occ_heating_setpt,json=occHeatingSetpt,proto3" json:"occ_heating_setpt,omitempty"`
	//setpoint for the current mode (heating or cooling)
	//unit: F
	CurrentModeSetpt *Double `protobuf:"bytes,12,opt,name=current_mode_setpt,json=currentModeSetpt,proto3" json:"current_mode_setpt,omitempty"`
	//setpoint from the user interface on the thermostat
	//unit: F
	UiSetpt *Double `protobuf:"bytes,13,opt,name=ui_setpt,json=uiSetpt,proto3" json:"ui_setpt,omitempty"`
	//cooling need
	//unit: F
	CoolingNeed *Double `protobuf:"bytes,14,opt,name=cooling_need,json=coolingNeed,proto3" json:"cooling_need,omitempty"`
	//heating need
	//unit: F
	HeatingNeed *Double `protobuf:"bytes,15,opt,name=heating_need,json=heatingNeed,proto3" json:"heating_need,omitempty"`
	//minimum cooling setpoint during unoccupied times
	//unit: F
	UnoccMinClgSetpt *Double `protobuf:"bytes,16,opt,name=unocc_min_clg_setpt,json=unoccMinClgSetpt,proto3" json:"unocc_min_clg_setpt,omitempty"`
	//maximum heating setpoint during unoccupied times
	//unit: F
	UnoccMaxHtgSetpt *Double `protobuf:"bytes,17,opt,name=unocc_max_htg_setpt,json=unoccMaxHtgSetpt,proto3" json:"unocc_max_htg_setpt,omitempty"`
	//minimum difference between heating and cooling setpoint
	//unit: F
	MinSetptDiff *Double `protobuf:"bytes,18,opt,name=min_setpt_diff,json=minSetptDiff,proto3" json:"min_setpt_diff,omitempty"`
	//minimum setpoint limit
	//unit: F
	MinSetptLimit *Double `protobuf:"bytes,19,opt,name=min_setpt_limit,json=minSetptLimit,proto3" json:"min_setpt_limit,omitempty"`
	//space temperature reading
	//unit: F
	SpaceTemp *Double `protobuf:"bytes,20,opt,name=space_temp,json=spaceTemp,proto3" json:"space_temp,omitempty"`
	//cooling P value of the PI control
	//unit: F
	CoolingProp *Double `protobuf:"bytes,21,opt,name=cooling_prop,json=coolingProp,proto3" json:"cooling_prop,omitempty"`
	//heating P value of the PI control
	//unit: F
	HeatingProp *Double `protobuf:"bytes,22,opt,name=heating_prop,json=heatingProp,proto3" json:"heating_prop,omitempty"`
	//cooling I value of the PI control
	//unit: per hour
	CoolingIntg *Double `protobuf:"bytes,23,opt,name=cooling_intg,json=coolingIntg,proto3" json:"cooling_intg,omitempty"`
	//heating I value of the PI control
	//unit: per hour
	HeatingIntg *Double `protobuf:"bytes,24,opt,name=heating_intg,json=heatingIntg,proto3" json:"heating_intg,omitempty"`
	//is fan on or off
	//unit: T/F
	Fan *Int64 `protobuf:"bytes,25,opt,name=fan,proto3" json:"fan,omitempty"`
	//is occupied or not
	//unit: T/F
	OccupancyMode *Int64 `protobuf:"bytes,26,opt,name=occupancy_mode,json=occupancyMode,proto3" json:"occupancy_mode,omitempty"`
	//is setpoint override on or off
	//unit: T/F
	SetptOverrideMode *Int64 `protobuf:"bytes,27,opt,name=setpt_override_mode,json=setptOverrideMode,proto3" json:"setpt_override_mode,omitempty"`
	//is there a fan alaram happening
	//unit: T/F
	FanAlarm *Int64 `protobuf:"bytes,28,opt,name=fan_alarm,json=fanAlarm,proto3" json:"fan_alarm,omitempty"`
	//is there a need for fan right now
	//unit: T/F
	FanNeed *Int64 `protobuf:"bytes,29,opt,name=fan_need,json=fanNeed,proto3" json:"fan_need,omitempty"`
	//is the hvac system in heating mode or not
	//unit: T/F
	HeatingCoolingMode *Int64 `protobuf:"bytes,30,opt,name=heating_cooling_mode,json=heatingCoolingMode,proto3" json:"heating_cooling_mode,omitempty"`
	//during occupied times, is fan on auto mode or on mode
	//unit: T/F
	OccFanAutoOn *Int64 `protobuf:"bytes,31,opt,name=occ_fan_auto_on,json=occFanAutoOn,proto3" json:"occ_fan_auto_on,omitempty"`
	//during unoccupied times, is fan on auto mode or on mode
	//unit: T/F
	UnoccFanAutoOn *Int64 `protobuf:"bytes,32,opt,name=unocc_fan_auto_on,json=unoccFanAutoOn,proto3" json:"unocc_fan_auto_on,omitempty"`
	//fan status
	//unit: T/F
	FanStatus *Int64 `protobuf:"bytes,33,opt,name=fan_status,json=fanStatus,proto3" json:"fan_status,omitempty"`
	//epoch time
	//unit: seconds
	Time                 uint64   `protobuf:"varint,34,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlexstatState) Reset()         { *m = FlexstatState{} }
func (m *FlexstatState) String() string { return proto.CompactTextString(m) }
func (*FlexstatState) ProtoMessage()    {}
func (*FlexstatState) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c3a15fc4e64d3b, []int{2}
}

func (m *FlexstatState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexstatState.Unmarshal(m, b)
}
func (m *FlexstatState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexstatState.Marshal(b, m, deterministic)
}
func (m *FlexstatState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexstatState.Merge(m, src)
}
func (m *FlexstatState) XXX_Size() int {
	return xxx_messageInfo_FlexstatState.Size(m)
}
func (m *FlexstatState) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexstatState.DiscardUnknown(m)
}

var xxx_messageInfo_FlexstatState proto.InternalMessageInfo

func (m *FlexstatState) GetSpaceTempSensor() *Double {
	if m != nil {
		return m.SpaceTempSensor
	}
	return nil
}

func (m *FlexstatState) GetMinimumProportional() *Double {
	if m != nil {
		return m.MinimumProportional
	}
	return nil
}

func (m *FlexstatState) GetActiveCoolingSetpt() *Double {
	if m != nil {
		return m.ActiveCoolingSetpt
	}
	return nil
}

func (m *FlexstatState) GetActiveHeatingSetpt() *Double {
	if m != nil {
		return m.ActiveHeatingSetpt
	}
	return nil
}

func (m *FlexstatState) GetUnoccCoolingSetpt() *Double {
	if m != nil {
		return m.UnoccCoolingSetpt
	}
	return nil
}

func (m *FlexstatState) GetUnoccHeatingSetpt() *Double {
	if m != nil {
		return m.UnoccHeatingSetpt
	}
	return nil
}

func (m *FlexstatState) GetOccMinClgSetpt() *Double {
	if m != nil {
		return m.OccMinClgSetpt
	}
	return nil
}

func (m *FlexstatState) GetOccMaxHtgSetpt() *Double {
	if m != nil {
		return m.OccMaxHtgSetpt
	}
	return nil
}

func (m *FlexstatState) GetOverrideTimer() *Double {
	if m != nil {
		return m.OverrideTimer
	}
	return nil
}

func (m *FlexstatState) GetOccCoolingSetpt() *Double {
	if m != nil {
		return m.OccCoolingSetpt
	}
	return nil
}

func (m *FlexstatState) GetOccHeatingSetpt() *Double {
	if m != nil {
		return m.OccHeatingSetpt
	}
	return nil
}

func (m *FlexstatState) GetCurrentModeSetpt() *Double {
	if m != nil {
		return m.CurrentModeSetpt
	}
	return nil
}

func (m *FlexstatState) GetUiSetpt() *Double {
	if m != nil {
		return m.UiSetpt
	}
	return nil
}

func (m *FlexstatState) GetCoolingNeed() *Double {
	if m != nil {
		return m.CoolingNeed
	}
	return nil
}

func (m *FlexstatState) GetHeatingNeed() *Double {
	if m != nil {
		return m.HeatingNeed
	}
	return nil
}

func (m *FlexstatState) GetUnoccMinClgSetpt() *Double {
	if m != nil {
		return m.UnoccMinClgSetpt
	}
	return nil
}

func (m *FlexstatState) GetUnoccMaxHtgSetpt() *Double {
	if m != nil {
		return m.UnoccMaxHtgSetpt
	}
	return nil
}

func (m *FlexstatState) GetMinSetptDiff() *Double {
	if m != nil {
		return m.MinSetptDiff
	}
	return nil
}

func (m *FlexstatState) GetMinSetptLimit() *Double {
	if m != nil {
		return m.MinSetptLimit
	}
	return nil
}

func (m *FlexstatState) GetSpaceTemp() *Double {
	if m != nil {
		return m.SpaceTemp
	}
	return nil
}

func (m *FlexstatState) GetCoolingProp() *Double {
	if m != nil {
		return m.CoolingProp
	}
	return nil
}

func (m *FlexstatState) GetHeatingProp() *Double {
	if m != nil {
		return m.HeatingProp
	}
	return nil
}

func (m *FlexstatState) GetCoolingIntg() *Double {
	if m != nil {
		return m.CoolingIntg
	}
	return nil
}

func (m *FlexstatState) GetHeatingIntg() *Double {
	if m != nil {
		return m.HeatingIntg
	}
	return nil
}

func (m *FlexstatState) GetFan() *Int64 {
	if m != nil {
		return m.Fan
	}
	return nil
}

func (m *FlexstatState) GetOccupancyMode() *Int64 {
	if m != nil {
		return m.OccupancyMode
	}
	return nil
}

func (m *FlexstatState) GetSetptOverrideMode() *Int64 {
	if m != nil {
		return m.SetptOverrideMode
	}
	return nil
}

func (m *FlexstatState) GetFanAlarm() *Int64 {
	if m != nil {
		return m.FanAlarm
	}
	return nil
}

func (m *FlexstatState) GetFanNeed() *Int64 {
	if m != nil {
		return m.FanNeed
	}
	return nil
}

func (m *FlexstatState) GetHeatingCoolingMode() *Int64 {
	if m != nil {
		return m.HeatingCoolingMode
	}
	return nil
}

func (m *FlexstatState) GetOccFanAutoOn() *Int64 {
	if m != nil {
		return m.OccFanAutoOn
	}
	return nil
}

func (m *FlexstatState) GetUnoccFanAutoOn() *Int64 {
	if m != nil {
		return m.UnoccFanAutoOn
	}
	return nil
}

func (m *FlexstatState) GetFanStatus() *Int64 {
	if m != nil {
		return m.FanStatus
	}
	return nil
}

func (m *FlexstatState) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*FlexstateActuationMessage)(nil), "xbospb.FlexstateActuationMessage")
	proto.RegisterType((*FlexstatSetpoints)(nil), "xbospb.FlexstatSetpoints")
	proto.RegisterType((*FlexstatState)(nil), "xbospb.FlexstatState")
}

func init() { proto.RegisterFile("flexstat.proto", fileDescriptor_67c3a15fc4e64d3b) }

var fileDescriptor_67c3a15fc4e64d3b = []byte{
	// 761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0x6d, 0x4f, 0xeb, 0x36,
	0x14, 0x80, 0x55, 0x60, 0x40, 0x4f, 0xdb, 0x40, 0xdd, 0x6e, 0x33, 0xec, 0x85, 0xae, 0x9f, 0xba,
	0x69, 0x43, 0x1a, 0x63, 0x6c, 0x4c, 0x7b, 0xab, 0x40, 0x08, 0xa4, 0xcb, 0xe5, 0xaa, 0xf0, 0x3d,
	0x72, 0x5d, 0xa7, 0xb5, 0x94, 0xd8, 0x51, 0xe2, 0xa0, 0xf2, 0x97, 0xee, 0x6f, 0xb9, 0x3f, 0xea,
	0xca, 0x4e, 0xdc, 0x24, 0xe0, 0xf6, 0x5b, 0x54, 0x3f, 0x8f, 0xcf, 0xf1, 0x39, 0x27, 0x6e, 0xc0,
	0x0b, 0x42, 0xb6, 0x4c, 0x15, 0x51, 0xa7, 0x71, 0x22, 0x95, 0x44, 0xbb, 0xcb, 0xa9, 0x4c, 0xe3,
	0xe9, 0x71, 0x4f, 0x64, 0x61, 0x48, 0xa6, 0x21, 0x53, 0x2f, 0x31, 0x4b, 0xf3, 0xc5, 0xe1, 0x02,
	0x8e, 0x6e, 0x0a, 0x9c, 0x8d, 0xa9, 0xca, 0x88, 0xe2, 0x52, 0xdc, 0xb3, 0x34, 0x25, 0x73, 0x86,
	0x10, 0xec, 0x28, 0x1e, 0x31, 0xdc, 0x18, 0x34, 0x46, 0x3b, 0x13, 0xf3, 0x8c, 0xfe, 0x80, 0x66,
	0xca, 0x54, 0x2c, 0xb9, 0x50, 0x29, 0xde, 0x1a, 0x6c, 0x8f, 0x5a, 0x67, 0x47, 0xa7, 0x79, 0x84,
	0x53, 0xbb, 0xd3, 0xa3, 0x05, 0x26, 0x25, 0x3b, 0xfc, 0xd8, 0x80, 0xee, 0x1b, 0x00, 0x9d, 0x40,
	0x8b, 0x2e, 0x88, 0x98, 0x33, 0xbf, 0x12, 0x09, 0xf2, 0x9f, 0x9e, 0x74, 0xbc, 0x4b, 0x38, 0x5c,
	0x30, 0xa2, 0xb8, 0x98, 0xfb, 0x76, 0x2f, 0xbc, 0x35, 0x68, 0x8c, 0x5a, 0x67, 0x9e, 0x0d, 0x7b,
	0x2d, 0xb3, 0x69, 0xc8, 0x26, 0x07, 0x05, 0x67, 0x37, 0xd7, 0x2a, 0x95, 0x32, 0xac, 0xa9, 0xdb,
	0x6e, 0xb5, 0xe0, 0xac, 0x3a, 0xfc, 0xe4, 0x41, 0x67, 0x95, 0xac, 0xae, 0x0d, 0xfa, 0x0b, 0xba,
	0x69, 0x4c, 0x28, 0xf3, 0x15, 0x8b, 0x62, 0x3f, 0x65, 0x22, 0x95, 0x89, 0x49, 0xd7, 0xb1, 0x9b,
	0x01, 0x9f, 0x58, 0x14, 0x3f, 0x1a, 0x0c, 0x8d, 0xa1, 0x1f, 0x71, 0xc1, 0xa3, 0x2c, 0xf2, 0xe3,
	0x44, 0xc6, 0x32, 0xd1, 0x45, 0x26, 0xe1, 0x9a, 0x73, 0xf4, 0x0a, 0xf6, 0x43, 0x05, 0x45, 0xff,
	0x43, 0x9f, 0x50, 0xc5, 0x9f, 0x99, 0x5f, 0x3d, 0xd2, 0xba, 0xf3, 0xa0, 0x9c, 0xbd, 0x2a, 0x4f,
	0xa5, 0x2a, 0x3b, 0x54, 0xeb, 0xa9, 0xf0, 0xce, 0xa6, 0x1d, 0x6e, 0xcb, 0x92, 0x2a, 0xf4, 0x2f,
	0xf4, 0x32, 0x21, 0x29, 0x7d, 0x95, 0xc2, 0x17, 0xce, 0x0d, 0xba, 0x06, 0xad, 0x65, 0xb0, 0xf2,
	0xeb, 0x09, 0xec, 0x6e, 0xf0, 0x6b, 0xf1, 0x2f, 0xa1, 0xab, 0xed, 0x88, 0x0b, 0x9f, 0x86, 0xd6,
	0xde, 0x73, 0xda, 0x9e, 0xa4, 0xf4, 0x9e, 0x8b, 0xab, 0xf0, 0x95, 0x4a, 0x96, 0xfe, 0x42, 0x59,
	0x75, 0x7f, 0xbd, 0x4a, 0x96, 0xb7, 0xaa, 0x50, 0x7f, 0x07, 0x4f, 0x3e, 0xb3, 0x24, 0xe1, 0xb3,
	0x7c, 0x46, 0x13, 0xdc, 0x74, 0x7a, 0x1d, 0x4b, 0xe9, 0xb1, 0x4d, 0xf4, 0xbc, 0xbc, 0x2d, 0x15,
	0xb8, 0xe7, 0xe5, 0x75, 0xa1, 0x0a, 0xb7, 0x5e, 0xa6, 0xd6, 0x5a, 0xb7, 0x56, 0xa4, 0xbf, 0x01,
	0xd1, 0x2c, 0x49, 0x98, 0x50, 0x7e, 0x24, 0x67, 0xac, 0x90, 0xdb, 0x4e, 0xf9, 0xb0, 0x20, 0xef,
	0xe5, 0x8c, 0xe5, 0xf6, 0x8f, 0xb0, 0x9f, 0xf1, 0xc2, 0xe9, 0x38, 0x9d, 0xbd, 0x8c, 0xe7, 0xe8,
	0xaf, 0xd0, 0xb6, 0x87, 0x13, 0x8c, 0xcd, 0xb0, 0xe7, 0xc4, 0x5b, 0x05, 0xf3, 0x9e, 0xb1, 0x99,
	0x56, 0xec, 0x99, 0x8c, 0x72, 0xe0, 0x56, 0x0a, 0xc6, 0x28, 0xff, 0xd8, 0x99, 0xa9, 0x77, 0xfd,
	0xd0, 0x7d, 0x1e, 0x83, 0x56, 0xfb, 0x5e, 0xea, 0xb5, 0xce, 0x77, 0x37, 0xe9, 0x95, 0xde, 0x9f,
	0x83, 0xa7, 0xe3, 0x1a, 0xc9, 0x9f, 0xf1, 0x20, 0xc0, 0xc8, 0x69, 0xb6, 0x23, 0x2e, 0x8c, 0x71,
	0xcd, 0x83, 0x00, 0x5d, 0xc0, 0x41, 0x69, 0x85, 0x3c, 0xe2, 0x0a, 0xf7, 0xdc, 0x23, 0x63, 0xb5,
	0x77, 0x1a, 0x42, 0xbf, 0x00, 0x94, 0x57, 0x0c, 0xee, 0x3b, 0x95, 0xe6, 0xea, 0x6e, 0xa9, 0x36,
	0x40, 0xdf, 0x2a, 0xf8, 0xcb, 0x8d, 0x0d, 0xd0, 0xb7, 0x49, 0xb5, 0x01, 0x46, 0xf9, 0x6a, 0x63,
	0x03, 0xac, 0x62, 0xa3, 0x70, 0xa1, 0xe6, 0xf8, 0xeb, 0x8d, 0x51, 0xee, 0x84, 0x9a, 0x57, 0xa3,
	0x18, 0x05, 0x6f, 0x8c, 0x62, 0x94, 0x13, 0xd8, 0x0e, 0x88, 0xc0, 0x47, 0x86, 0xec, 0x58, 0xf2,
	0x4e, 0xa8, 0x8b, 0xf3, 0x89, 0x5e, 0xd1, 0x9d, 0x90, 0x94, 0x66, 0x31, 0x11, 0xf4, 0xc5, 0x0c,
	0x36, 0x3e, 0x76, 0xb1, 0x9d, 0x15, 0xa4, 0x67, 0x5a, 0xb7, 0x3f, 0xef, 0xc2, 0xea, 0x0d, 0x36,
	0xea, 0x37, 0x2e, 0xb5, 0x6b, 0xc8, 0x87, 0x02, 0x34, 0xfa, 0x4f, 0xd0, 0x0c, 0x88, 0xf0, 0x49,
	0x48, 0x92, 0x08, 0x7f, 0xeb, 0x92, 0xf6, 0x03, 0x22, 0xc6, 0x7a, 0x19, 0x8d, 0x40, 0x3f, 0xe7,
	0x73, 0xfd, 0x9d, 0x0b, 0xdd, 0x0b, 0x88, 0x30, 0x23, 0xfd, 0x1f, 0xf4, 0x6d, 0x79, 0x6c, 0x65,
	0x4d, 0x56, 0xdf, 0xbb, 0x2c, 0x54, 0xa0, 0xc5, 0xfd, 0x60, 0xd2, 0x3a, 0x07, 0xfd, 0xd6, 0xfb,
	0x26, 0xb5, 0x4c, 0x49, 0x5f, 0x0a, 0x7c, 0xe2, 0x72, 0xdb, 0x92, 0xd2, 0x1b, 0x22, 0xc6, 0x99,
	0x92, 0x0f, 0x02, 0xfd, 0x09, 0xf9, 0x95, 0x5a, 0xf3, 0x06, 0x2e, 0xcf, 0x33, 0x5c, 0x69, 0xfe,
	0x0c, 0xa0, 0x1d, 0xfd, 0x5f, 0x98, 0xa5, 0xf8, 0x07, 0x97, 0xa2, 0xeb, 0xf4, 0x68, 0xd6, 0x57,
	0x1f, 0x0d, 0xc3, 0xf2, 0xa3, 0x61, 0xba, 0x6b, 0x3e, 0x36, 0x7e, 0xfb, 0x1c, 0x00, 0x00, 0xff,
	0xff, 0xbf, 0x64, 0x90, 0xc4, 0x9b, 0x08, 0x00, 0x00,
}
